
import React, { Component } from 'react';
import Grid from '@material-ui/core/Grid';
import Card from '@material-ui/core/Card';
import CardContent from '@material-ui/core/CardContent';
import CardMedia from '@material-ui/core/CardMedia';
import Hidden from '@material-ui/core/Hidden';
import Typography from '@material-ui/core/Typography';
import PropTypes from 'prop-types';
import { withStyles } from '@material-ui/core/styles';
import { randomUsers, receivePosts } from './data';
import Waypoint from 'react-waypoint';
//import InfiniteScroll from 'react-infinite-scroller';
import CircularProgress from '@material-ui/core/CircularProgress';
//import InfiniteScroll from 'react-simple-infinite-scroll';
import { capitalizeWords } from './helpers/utilities';
import faker from 'faker';

const {
  date: { past, recent },
  lorem: { paragraph, paragraphs, slug, words },
  random: { uuid }
} = faker;

const recentDates = Array(50)
  .fill()
  .map(() => recent())
  .sort((date1, date2) => {
    if (date1 > date2) return 1;
    if (date1 < date2) return -1;
    return 0;
  });

const styles = theme => ({
  card: {
    display: 'flex',
    width: '100%',

    // margin: '10px 0',
    borderBottom: '1px solid grey'
  },
  cardContent: {
    //margin: '1rem'
    // paddingTop: 0
    // width: '80%'
  },
  contentTitle: {
    // position: 'relative',
    marginBottom: '0.5rem'
  },
  contentauthor: {
    display: 'flex',
    flexWrap: 'wrap',
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  contentDescription: {
    // lineHeight: '0.5rem',
    marginBottom: '0.5rem',
    overflowY: 'hidden'
  },
  contentMore: {
    textAlign: 'right'
  },
  cardDetails: {
    flex: 1
  },
  cardMedia: {
    paddingTop: '50%',
    marginTop: '1rem'
  },

  progress: {
    margin: theme.spacing.unit * 2
  }
});

const formatDate = date => {
  var time = new Date(date);
  var year = time.getFullYear();
  var day = time.getDate();
  var hour = time.getHours();
  var minute = time.getMinutes();
  var month = time.getMonth() + 1;
  var composedTime =
    day +
    '/' +
    month +
    '/' +
    year +
    '|' +
    hour +
    ':' +
    (minute < 10 ? '0' + minute : minute);
  return composedTime;
};
export const fetchPosts = (count = 1, options = {}) => {
  const posts = Array(count)
    .fill()
    .map(() => {
      const summary = paragraph();
      return {
        id: options.id || uuid().split('-')[0],
        title: capitalizeWords(words()),
        summary,
        content: `${summary}\n${paragraphs()}`,
        date: recentDates.pop() || past(),
        slug: options.slug || slug()
      };
    });

  return {
    posts
  };
};
class List extends Component {
  state = {
    refreshing: false,
    response: fetchPosts(10)
  };

  onRefresh = () => {
    this.setState({
      response: fetchPosts(10)
    });
  };

  render() {
    const { classes } = this.props;

    const posts = this.state.response.posts;
    console.log(posts);
    return (
      <Grid container spacing={40} className={classes.cardGrid}>
        {posts.map(({ id, title, summary, date, slug }, index) => {
          return (
            <Grid item key={index} xs={12} md={6}>
              <Card className={classes.card}>
                <div className={classes.cardDetails}>
                  <CardContent className={classes.cardContent}>
                    <div className={classes.contentTitle}>
                      <Typography variant="title">
                        {/*<a
                        href={news.url}
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        {news.title}
                      </a>*/}
                        {title}
                      </Typography>
                    </div>

                    <div className={classes.contentDescription}>
                      <Typography variant="subtitle1" color="textSecondary">
                        {summary}
                      </Typography>
                    </div>
                    <div className={classes.contentMore}>
                      <Typography variant="subtitle1" color="primary">
                        Continue reading...
                      </Typography>
                    </div>
                  </CardContent>
                </div>
              </Card>
            </Grid>
          );
        })}
        {/* waypoint */}
        {!this.state.refreshing && <Waypoint onEnter={this.onRefresh} />} <br />
        <br />
        {/* progress */}
        <div style={{ textAlign: 'center' }}>
          <CircularProgress size={80} thickness={6} />
        </div>
        <br />
      </Grid>
    );
  }
}
List.propTypes = {
  classes: PropTypes.object.isRequired,
  posts: PropTypes.arrayOf(
    PropTypes.shape({
      date: PropTypes.instanceOf(Date),
      id: PropTypes.string,
      slug: PropTypes.string,
      summary: PropTypes.string,
      title: PropTypes.string
    })
  )
};

export default withStyles(styles)(List);